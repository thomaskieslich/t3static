#!/bin/bash

# Check for .env file existence, if not make a copy from .env.dist
if [ ! -f "${BASH_SOURCE%/*}"/.env ]; then
  cp "${BASH_SOURCE%/*}"/.env.dist "${BASH_SOURCE%/*}"/.env
  echo 'custom .env not found. copy .env.dist to .env'
fi

# get Environment Settings
source "${BASH_SOURCE%/*}/.env"

# Check if TEST_PATH_DOCKER is set and override TEST_PATH if needed
if [ -n "$TEST_PATH_DOCKER" ]; then
  TEST_PATH="${TEST_PATH_DOCKER}"
fi

# set CONFIGURATION_PATH depend on TEST_PATH
CONFIGURATION_PATH="${TEST_PATH}/${CONFIGURATION_PATH}"

# include util scripts
source "${BASH_SOURCE%/*}/includes/util-echo.sh"
source "${BASH_SOURCE%/*}/includes/util-choose-options.sh"
source "${BASH_SOURCE%/*}/includes/util-test-types.sh"

# include Test Scripts
source "${BASH_SOURCE%/*}/includes/tests-frontend.sh"
source "${BASH_SOURCE%/*}/includes/tests-php.sh"
source "${BASH_SOURCE%/*}/includes/tests-misc.sh"
source "${BASH_SOURCE%/*}/includes/tests-typo3.sh"

# set default values if not filled already
if [ -z "${PACKAGE_NAME}" ]; then
  PACKAGE_NAME=${PACKAGE_DEFAULT}
fi
if [ -z "${TEST_TYPE}" ]; then
  TEST_TYPE=${TEST_DEFAULT}
fi

# Get CLI Options
while getopts "p:t:" option; do
    case $option in p)
        PACKAGE_NAME=$OPTARG
        ;;
    t)
        TEST_TYPE=$OPTARG
        ;;
    *) ;;
    esac
done

# only choose selection, if $TEST_TYPE is not install
if [[ "$TEST_TYPE" != "install" ]]; then
    choose_package_if_empty
    choose_test_if_empty
fi

# Full path to Package
FULL_PACKAGE_PATH=$(pwd)/${PACKAGE_PATH}/${PACKAGE_NAME}

# Remove unnecessary slashes and export
# shellcheck disable=SC2001
FULL_PACKAGE_PATH=$(echo "$FULL_PACKAGE_PATH" | sed 's|//\{1,\}|/|g')

#  to use in php with getenv('FULL_PACKAGE_PATH')
export FULL_PACKAGE_PATH

echoInfo "Test: ${TEST_TYPE}"
echoInfo "Package: ${PACKAGE_NAME}"

## Init Packages
install:packages() {
    cd "${TEST_PATH}" || exit
    rm -f composer.lock package-lock.json
    composer install --no-progress --no-interaction
    npm install --quiet
    cd ../..
}

# prepare and run Tests
IFS=',' read -ra TESTS <<< "$TEST_TYPE"
if [[ -n "${TESTS[*]}" ]]; then
  for test_item in "${TESTS[@]}"; do
    # Whitespace entfernen
    test_item=$(echo "$test_item" | xargs)
    # Process the trimmed test_item here
    echo "Processing: $test_item"
    export TEST_TYPE=$test_item
    run_test
  done
fi
